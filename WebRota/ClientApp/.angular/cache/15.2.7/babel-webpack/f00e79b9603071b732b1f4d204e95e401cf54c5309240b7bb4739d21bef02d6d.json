{"ast":null,"code":"import { __decorate } from \"tslib\";\n// mapa.component.ts\nimport { Component } from '@angular/core';\nimport * as L from 'leaflet';\nlet MapaComponent = class MapaComponent {\n  constructor() {}\n  ngOnInit() {\n    // Crie um mapa Leaflet no elemento 'map'\n    const map = L.map('map').setView([-18.924067, -48.282142], 12);\n    // Adicione um mapa base (usando OpenStreetMap como exemplo)\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n    // Carregue as coordenadas do arquivo positions.json (você pode fazer uma solicitação HTTP aqui)\n    var positionsData = {\n      \"data\": [{\n        \"date_time\": \"2019-02-12T10:57:36+00:00\",\n        \"latitude\": \"-18.92406700\",\n        \"longitude\": \"-48.28214200\"\n      }, {\n        \"date_time\": \"2019-02-12T10:57:06+00:00\",\n        \"latitude\": \"-18.92376500\",\n        \"longitude\": \"-48.28210800\"\n      }, {\n        \"date_time\": \"2019-02-12T10:56:36+00:00\",\n        \"latitude\": \"-18.92213500\",\n        \"longitude\": \"-48.28205200\"\n      }, {\n        \"date_time\": \"2019-02-12T10:56:06+00:00\",\n        \"latitude\": \"-18.92082200\",\n        \"longitude\": \"-48.28132800\"\n      }, {\n        \"date_time\": \"2019-02-12T10:55:36+00:00\",\n        \"latitude\": \"-18.91951300\",\n        \"longitude\": \"-48.28033200\"\n      }, {\n        \"date_time\": \"2019-02-12T10:55:06+00:00\",\n        \"latitude\": \"-18.91966300\",\n        \"longitude\": \"-48.27849800\"\n      }, {\n        \"date_time\": \"2019-02-12T10:54:36+00:00\",\n        \"latitude\": \"-18.92081800\",\n        \"longitude\": \"-48.27682200\"\n      }, {\n        \"date_time\": \"2019-02-12T10:54:06+00:00\",\n        \"latitude\": \"-18.92195000\",\n        \"longitude\": \"-48.27513200\"\n      }, {\n        \"date_time\": \"2019-02-12T10:53:36+00:00\",\n        \"latitude\": \"-18.92298100\",\n        \"longitude\": \"-48.27350800\"\n      }, {\n        \"date_time\": \"2019-02-12T10:53:06+00:00\",\n        \"latitude\": \"-18.92313700\",\n        \"longitude\": \"-48.27337200\"\n      }, {\n        \"date_time\": \"2019-02-12T10:52:36+00:00\",\n        \"latitude\": \"-18.92372200\",\n        \"longitude\": \"-48.27213800\"\n      }, {\n        \"date_time\": \"2019-02-12T10:52:06+00:00\",\n        \"latitude\": \"-18.92295000\",\n        \"longitude\": \"-48.27078200\"\n      }, {\n        \"date_time\": \"2019-02-12T10:51:36+00:00\",\n        \"latitude\": \"-18.91990800\",\n        \"longitude\": \"-48.26785500\"\n      }, {\n        \"date_time\": \"2019-02-12T10:51:06+00:00\",\n        \"latitude\": \"-18.91765300\",\n        \"longitude\": \"-48.26528000\"\n      }, {\n        \"date_time\": \"2019-02-12T10:50:36+00:00\",\n        \"latitude\": \"-18.91815100\",\n        \"longitude\": \"-48.26453900\"\n      }, {\n        \"date_time\": \"2019-02-12T10:50:06+00:00\",\n        \"latitude\": \"-18.91814500\",\n        \"longitude\": \"-48.26453700\"\n      }]\n    };\n    const positions = positionsData.data;\n    // Crie um array para armazenar os marcadores e a linha do polígono\n    const markers = [];\n    const polygon = L.polyline([], {\n      color: 'blue'\n    }).addTo(map);\n    // Itere pelas coordenadas e crie marcadores e adicione à linha do polígono\n    positions.forEach(function (position) {\n      const lat = parseFloat(position.latitude);\n      const lon = parseFloat(position.longitude);\n      const marker = L.marker([lat, lon]).addTo(map);\n      markers.push(marker);\n      polygon.addLatLng([lat, lon]);\n    });\n    // Ajuste o zoom do mapa para que todos os marcadores sejam visíveis\n    map.fitBounds(L.featureGroup(markers).getBounds());\n    // Adicione a linha do polígono ao mapa\n    map.addLayer(polygon);\n  }\n};\nMapaComponent = __decorate([Component({\n  selector: 'app-mapa',\n  templateUrl: './mapa.component.html',\n  styleUrls: ['./mapa.component.css']\n})], MapaComponent);\nexport { MapaComponent };","map":{"version":3,"mappings":"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","names":["Component","L","MapaComponent","constructor","ngOnInit","map","setView","tileLayer","attribution","addTo","positionsData","positions","data","markers","polygon","polyline","color","forEach","position","lat","parseFloat","latitude","lon","longitude","marker","push","addLatLng","fitBounds","featureGroup","getBounds","addLayer","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\willi\\Documents\\GitHub\\platform-test\\WebRota\\ClientApp\\src\\app\\map\\map.component.ts"],"sourcesContent":["// mapa.component.ts\r\nimport { Component, OnInit } from '@angular/core';\r\nimport * as L from 'leaflet';\r\n\r\n@Component({\r\n  selector: 'app-mapa',\r\n  templateUrl: './mapa.component.html',\r\n  styleUrls: ['./mapa.component.css']\r\n})\r\nexport class MapaComponent implements OnInit {\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    // Crie um mapa Leaflet no elemento 'map'\r\n    const map = L.map('map').setView([-18.924067, -48.282142], 12);\r\n\r\n    // Adicione um mapa base (usando OpenStreetMap como exemplo)\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n    }).addTo(map);\r\n\r\n    // Carregue as coordenadas do arquivo positions.json (você pode fazer uma solicitação HTTP aqui)\r\n\r\n    var positionsData = {\r\n      \"data\": [\r\n        {\r\n          \"date_time\": \"2019-02-12T10:57:36+00:00\",\r\n          \"latitude\": \"-18.92406700\",\r\n          \"longitude\": \"-48.28214200\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:57:06+00:00\",\r\n          \"latitude\": \"-18.92376500\",\r\n          \"longitude\": \"-48.28210800\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:56:36+00:00\",\r\n          \"latitude\": \"-18.92213500\",\r\n          \"longitude\": \"-48.28205200\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:56:06+00:00\",\r\n          \"latitude\": \"-18.92082200\",\r\n          \"longitude\": \"-48.28132800\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:55:36+00:00\",\r\n          \"latitude\": \"-18.91951300\",\r\n          \"longitude\": \"-48.28033200\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:55:06+00:00\",\r\n          \"latitude\": \"-18.91966300\",\r\n          \"longitude\": \"-48.27849800\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:54:36+00:00\",\r\n          \"latitude\": \"-18.92081800\",\r\n          \"longitude\": \"-48.27682200\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:54:06+00:00\",\r\n          \"latitude\": \"-18.92195000\",\r\n          \"longitude\": \"-48.27513200\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:53:36+00:00\",\r\n          \"latitude\": \"-18.92298100\",\r\n          \"longitude\": \"-48.27350800\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:53:06+00:00\",\r\n          \"latitude\": \"-18.92313700\",\r\n          \"longitude\": \"-48.27337200\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:52:36+00:00\",\r\n          \"latitude\": \"-18.92372200\",\r\n          \"longitude\": \"-48.27213800\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:52:06+00:00\",\r\n          \"latitude\": \"-18.92295000\",\r\n          \"longitude\": \"-48.27078200\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:51:36+00:00\",\r\n          \"latitude\": \"-18.91990800\",\r\n          \"longitude\": \"-48.26785500\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:51:06+00:00\",\r\n          \"latitude\": \"-18.91765300\",\r\n          \"longitude\": \"-48.26528000\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:50:36+00:00\",\r\n          \"latitude\": \"-18.91815100\",\r\n          \"longitude\": \"-48.26453900\"\r\n        },\r\n        {\r\n          \"date_time\": \"2019-02-12T10:50:06+00:00\",\r\n          \"latitude\": \"-18.91814500\",\r\n          \"longitude\": \"-48.26453700\"\r\n        }\r\n      ]\r\n    };\r\n\r\n    const positions = positionsData.data;\r\n\r\n    // Crie um array para armazenar os marcadores e a linha do polígono\r\n    const markers: L.Layer[] | undefined = [];\r\n    const polygon = L.polyline([], { color: 'blue' }).addTo(map);\r\n\r\n    // Itere pelas coordenadas e crie marcadores e adicione à linha do polígono\r\n    positions.forEach(function (position) {\r\n      const lat = parseFloat(position.latitude);\r\n      const lon = parseFloat(position.longitude);\r\n      const marker = L.marker([lat, lon]).addTo(map);\r\n      markers.push(marker);\r\n      polygon.addLatLng([lat, lon]);\r\n    });\r\n\r\n    // Ajuste o zoom do mapa para que todos os marcadores sejam visíveis\r\n    map.fitBounds(L.featureGroup(markers).getBounds());\r\n\r\n    // Adicione a linha do polígono ao mapa\r\n    map.addLayer(polygon);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let LeafletMapComponent = /*#__PURE__*/(() => {\n  class LeafletMapComponent {\n    constructor(http) {\n      this.http = http;\n      this.totalDistance = 0;\n      this.markers = []; // Usando o tipo Marker\n    }\n\n    ngOnInit() {\n      this.map = L.map('map').setView([-18.924067, -48.282142], 12);\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      }).addTo(this.map);\n      this.http.get('./assets/positions.json').subscribe(data => {\n        const positionsData = data;\n        const positions = positionsData.data;\n        const polygon = L.polyline([], {\n          color: 'blue'\n        }).addTo(this.map);\n        let prevPosition = null;\n        positions.forEach(position => {\n          const lat = parseFloat(position.latitude);\n          const lon = parseFloat(position.longitude);\n          const marker = L.marker([lat, lon]).addTo(this.map);\n          this.markers.push(marker);\n          if (prevPosition) {\n            // Use getLatLng() para obter as coordenadas do marcador\n            const currentLatLng = marker.getLatLng();\n            const prevLatLng = prevPosition.getLatLng();\n            const distance = currentLatLng.distanceTo(prevLatLng);\n            this.totalDistance += distance;\n          }\n          polygon.addLatLng([lat, lon]);\n          prevPosition = marker;\n        });\n        this.map.fitBounds(L.featureGroup(this.markers).getBounds());\n      });\n    }\n    addMarker() {\n      // Solicite ao usuário que clique no mapa para adicionar um novo marcador\n      this.map.on('click', e => {\n        const marker = L.marker(e.latlng).addTo(this.map);\n        this.markers.push(marker);\n        // Recalcule a soma da distância\n        this.recalculateTotalDistance();\n      });\n    }\n    recalculateTotalDistance() {\n      // Recalcule a soma da distância com base nos marcadores existentes\n      this.totalDistance = 0;\n      for (let i = 1; i < this.markers.length; i++) {\n        const currentLatLng = this.markers[i].g(); // Usando Marker\n        const prevLatLng = this.markers[i - 1].getLatLng(); // Usando Marker\n        const distance = currentLatLng.distanceTo(prevLatLng);\n        this.totalDistance += distance;\n      }\n    }\n  }\n  LeafletMapComponent.ɵfac = function LeafletMapComponent_Factory(t) {\n    return new (t || LeafletMapComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  LeafletMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LeafletMapComponent,\n    selectors: [[\"app-leaflet-map\"]],\n    decls: 6,\n    vars: 1,\n    consts: [[2, \"width\", \"100%\", \"display\", \"flex\", \"flex-direction\", \"column\", \"align-items\", \"center\", \"justify-content\", \"center\"], [2, \"color\", \"orange\", \"font-weight\", \"bold\"], [2, \"color\", \"orange\"], [\"id\", \"map\", 2, \"height\", \"500px\"]],\n    template: function LeafletMapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"p\", 1);\n        i0.ɵɵtext(2, \"Soma da dist\\u00E2ncia: \");\n        i0.ɵɵelementStart(3, \"span\", 2);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(5, \"div\", 3);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", ctx.totalDistance, \" metros\");\n      }\n    }\n  });\n  return LeafletMapComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
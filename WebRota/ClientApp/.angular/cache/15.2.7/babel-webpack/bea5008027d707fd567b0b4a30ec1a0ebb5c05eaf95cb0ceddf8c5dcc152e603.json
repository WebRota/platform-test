{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LeafletMapComponent {\n  constructor(http) {\n    this.http = http;\n  } // Injete o HttpClient\n  ngOnInit() {\n    const map = L.map('map').setView([-18.924067, -48.282142], 12);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n    // Faça uma solicitação HTTP para buscar o arquivo JSON local\n    this.http.get('./assets/positions.json').subscribe(data => {\n      const positionsData = data;\n      // Continue com o restante do seu código usando positionsData\n      const positions = positionsData.data;\n      const markers = [];\n      const polygon = L.polyline([], {\n        color: 'blue'\n      }).addTo(map);\n      positions.forEach(function (position) {\n        const lat = parseFloat(position.latitude);\n        const lon = parseFloat(position.longitude);\n        const marker = L.marker([lat, lon]).addTo(map);\n        markers.push(marker);\n        polygon.addLatLng([lat, lon]);\n      });\n      map.fitBounds(L.featureGroup(markers).getBounds());\n      map.addLayer(polygon);\n    });\n  }\n}\nLeafletMapComponent.ɵfac = function LeafletMapComponent_Factory(t) {\n  return new (t || LeafletMapComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nLeafletMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LeafletMapComponent,\n  selectors: [[\"app-leaflet-map\"]],\n  decls: 2,\n  vars: 0,\n  consts: [[2, \"width\", \"100%\"], [\"id\", \"map\", 2, \"height\", \"500px\"]],\n  template: function LeafletMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0)(1, \"div\", 1);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAQ5B,OAAM,MAAOC,mBAAmB;EAC9BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB,CAAC,CAAC;EAE1CC,QAAQ;IACN,MAAMC,GAAG,GAAGL,CAAC,CAACK,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC;IAE9DN,CAAC,CAACO,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;KACd,CAAC,CAACC,KAAK,CAACJ,GAAG,CAAC;IAEb;IACA,IAAI,CAACF,IAAI,CAACO,GAAG,CAAC,yBAAyB,CAAC,CACrCC,SAAS,CAAEC,IAAS,IAAI;MACvB,MAAMC,aAAa,GAAGD,IAAI;MAE1B;MACA,MAAME,SAAS,GAAGD,aAAa,CAACD,IAAI;MACpC,MAAMG,OAAO,GAA0B,EAAE;MACzC,MAAMC,OAAO,GAAGhB,CAAC,CAACiB,QAAQ,CAAC,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE,CAAC,CAACT,KAAK,CAACJ,GAAG,CAAC;MAE5DS,SAAS,CAACK,OAAO,CAAC,UAAUC,QAAkD;QAC5E,MAAMC,GAAG,GAAGC,UAAU,CAACF,QAAQ,CAACG,QAAQ,CAAC;QACzC,MAAMC,GAAG,GAAGF,UAAU,CAACF,QAAQ,CAACK,SAAS,CAAC;QAC1C,MAAMC,MAAM,GAAG1B,CAAC,CAAC0B,MAAM,CAAC,CAACL,GAAG,EAAEG,GAAG,CAAC,CAAC,CAACf,KAAK,CAACJ,GAAG,CAAC;QAC9CU,OAAO,CAACY,IAAI,CAACD,MAAM,CAAC;QACpBV,OAAO,CAACY,SAAS,CAAC,CAACP,GAAG,EAAEG,GAAG,CAAC,CAAC;MAC/B,CAAC,CAAC;MAEFnB,GAAG,CAACwB,SAAS,CAAC7B,CAAC,CAAC8B,YAAY,CAACf,OAAO,CAAC,CAACgB,SAAS,EAAE,CAAC;MAClD1B,GAAG,CAAC2B,QAAQ,CAAChB,OAAO,CAAC;IACvB,CAAC,CAAC;EACN;;AA/BWf,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAgC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCThCC,yBAAgC","names":["L","LeafletMapComponent","constructor","http","ngOnInit","map","setView","tileLayer","attribution","addTo","get","subscribe","data","positionsData","positions","markers","polygon","polyline","color","forEach","position","lat","parseFloat","latitude","lon","longitude","marker","push","addLatLng","fitBounds","featureGroup","getBounds","addLayer","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\willi\\Documents\\GitHub\\platform-test\\WebRota\\ClientApp\\src\\app\\leaflet-map\\leaflet-map.component.ts","C:\\Users\\willi\\Documents\\GitHub\\platform-test\\WebRota\\ClientApp\\src\\app\\leaflet-map\\leaflet-map.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as L from 'leaflet';\nimport { HttpClient } from '@angular/common/http'; // Importe o HttpClient\n\n@Component({\n  selector: 'app-leaflet-map',\n  templateUrl: './leaflet-map.component.html',\n  styleUrls: ['./leaflet-map.component.css']\n})\nexport class LeafletMapComponent implements OnInit {\n  constructor(private http: HttpClient) { } // Injete o HttpClient\n\n  ngOnInit(): void {\n    const map = L.map('map').setView([-18.924067, -48.282142], 12);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n\n    // Faça uma solicitação HTTP para buscar o arquivo JSON local\n    this.http.get('./assets/positions.json')\n      .subscribe((data: any) => {\n        const positionsData = data;\n\n        // Continue com o restante do seu código usando positionsData\n        const positions = positionsData.data;\n        const markers: L.Layer[] | undefined = [];\n        const polygon = L.polyline([], { color: 'blue' }).addTo(map);\n\n        positions.forEach(function (position: { latitude: string; longitude: string; }) {\n          const lat = parseFloat(position.latitude);\n          const lon = parseFloat(position.longitude);\n          const marker = L.marker([lat, lon]).addTo(map);\n          markers.push(marker);\n          polygon.addLatLng([lat, lon]);\n        });\n\n        map.fitBounds(L.featureGroup(markers).getBounds());\n        map.addLayer(polygon);\n      });\n  }\n}\n","<div style=\"width: 100%;\"></div>\n<!-- leaflet-map.component.html -->\n<div id=\"map\" style=\"height: 500px;\"></div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
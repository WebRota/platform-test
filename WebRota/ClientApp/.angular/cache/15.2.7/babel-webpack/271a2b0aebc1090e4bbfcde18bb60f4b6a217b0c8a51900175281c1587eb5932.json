{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LeafletMapComponent {\n  constructor(http) {\n    this.http = http;\n    this.totalDistance = 0; // Variável para rastrear a soma da distância\n  }\n\n  ngOnInit() {\n    const map = L.map('map').setView([-18.924067, -48.282142], 12);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n    this.http.get('./assets/positions.json').subscribe(data => {\n      const positionsData = data;\n      const positions = positionsData.data;\n      const markers = [];\n      const polygon = L.polyline([], {\n        color: 'blue'\n      }).addTo(map);\n      let prevPosition = null; // Variável para rastrear a posição anterior\n      positions.forEach(position => {\n        const lat = parseFloat(position.latitude);\n        const lon = parseFloat(position.longitude);\n        const marker = L.marker([lat, lon]).addTo(map);\n        markers.push(marker);\n        if (prevPosition) {\n          const currentLatLng = L.latLng(lat, lon);\n          const prevLatLng = L.latLng(prevPosition.latitude, prevPosition.longitude);\n          const distance = currentLatLng.distanceTo(prevLatLng);\n          // Adicione a distância à variável de soma\n          this.totalDistance += distance;\n        }\n        polygon.addLatLng([lat, lon]);\n        prevPosition = position; // Atualize a posição anterior\n      });\n\n      map.fitBounds(L.featureGroup(markers).getBounds());\n      // Agora você pode exibir a soma da distância em algum lugar, por exemplo, no console\n      console.log('Soma da distância:', this.totalDistance);\n    });\n  }\n}\nLeafletMapComponent.ɵfac = function LeafletMapComponent_Factory(t) {\n  return new (t || LeafletMapComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nLeafletMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LeafletMapComponent,\n  selectors: [[\"app-leaflet-map\"]],\n  decls: 4,\n  vars: 1,\n  consts: [[1, \"total-distance\"], [2, \"width\", \"100%\"], [\"id\", \"map\", 2, \"height\", \"500px\"]],\n  template: function LeafletMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"div\", 1)(3, \"div\", 2);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" Soma da dist\\u00E2ncia: \", ctx.totalDistance, \" metros\\n\");\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,CAAC,MAAM,SAAS;;;AAQ5B,OAAM,MAAOC,mBAAmB;EAG9BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,kBAAa,GAAW,CAAC,CAAC,CAAC;EAEa;;EAExCC,QAAQ;IACN,MAAMC,GAAG,GAAGL,CAAC,CAACK,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC;IAE9DN,CAAC,CAACO,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;KACd,CAAC,CAACC,KAAK,CAACJ,GAAG,CAAC;IAEb,IAAI,CAACF,IAAI,CAACO,GAAG,CAAC,yBAAyB,CAAC,CAACC,SAAS,CAAEC,IAAS,IAAI;MAC/D,MAAMC,aAAa,GAAGD,IAAI;MAE1B,MAAME,SAAS,GAAGD,aAAa,CAACD,IAAI;MACpC,MAAMG,OAAO,GAA0B,EAAE;MACzC,MAAMC,OAAO,GAAGhB,CAAC,CAACiB,QAAQ,CAAC,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE,CAAC,CAACT,KAAK,CAACJ,GAAG,CAAC;MAE5D,IAAIc,YAAY,GAAQ,IAAI,CAAC,CAAC;MAE9BL,SAAS,CAACM,OAAO,CAAEC,QAAa,IAAI;QAClC,MAAMC,GAAG,GAAGC,UAAU,CAACF,QAAQ,CAACG,QAAQ,CAAC;QACzC,MAAMC,GAAG,GAAGF,UAAU,CAACF,QAAQ,CAACK,SAAS,CAAC;QAC1C,MAAMC,MAAM,GAAG3B,CAAC,CAAC2B,MAAM,CAAC,CAACL,GAAG,EAAEG,GAAG,CAAC,CAAC,CAAChB,KAAK,CAACJ,GAAG,CAAC;QAC9CU,OAAO,CAACa,IAAI,CAACD,MAAM,CAAC;QAEpB,IAAIR,YAAY,EAAE;UAChB,MAAMU,aAAa,GAAG7B,CAAC,CAAC8B,MAAM,CAACR,GAAG,EAAEG,GAAG,CAAC;UACxC,MAAMM,UAAU,GAAG/B,CAAC,CAAC8B,MAAM,CAACX,YAAY,CAACK,QAAQ,EAAEL,YAAY,CAACO,SAAS,CAAC;UAC1E,MAAMM,QAAQ,GAAGH,aAAa,CAACI,UAAU,CAACF,UAAU,CAAC;UAErD;UACA,IAAI,CAACG,aAAa,IAAIF,QAAQ;;QAGhChB,OAAO,CAACmB,SAAS,CAAC,CAACb,GAAG,EAAEG,GAAG,CAAC,CAAC;QAC7BN,YAAY,GAAGE,QAAQ,CAAC,CAAC;MAC3B,CAAC,CAAC;;MAEFhB,GAAG,CAAC+B,SAAS,CAACpC,CAAC,CAACqC,YAAY,CAACtB,OAAO,CAAC,CAACuB,SAAS,EAAE,CAAC;MAElD;MACAC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAACN,aAAa,CAAC;IACvD,CAAC,CAAC;EACJ;;AA7CWjC,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAwC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCThCC,8BAA4B;MAC1BA,YACF;MAAAA,iBAAM;MACNA,yBAAgC;;;MAF9BA,eACF;MADEA,kFACF","names":["L","LeafletMapComponent","constructor","http","ngOnInit","map","setView","tileLayer","attribution","addTo","get","subscribe","data","positionsData","positions","markers","polygon","polyline","color","prevPosition","forEach","position","lat","parseFloat","latitude","lon","longitude","marker","push","currentLatLng","latLng","prevLatLng","distance","distanceTo","totalDistance","addLatLng","fitBounds","featureGroup","getBounds","console","log","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\willi\\Documents\\GitHub\\platform-test\\WebRota\\ClientApp\\src\\app\\leaflet-map\\leaflet-map.component.ts","C:\\Users\\willi\\Documents\\GitHub\\platform-test\\WebRota\\ClientApp\\src\\app\\leaflet-map\\leaflet-map.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as L from 'leaflet';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-leaflet-map',\n  templateUrl: './leaflet-map.component.html',\n  styleUrls: ['./leaflet-map.component.css']\n})\nexport class LeafletMapComponent implements OnInit {\n  totalDistance: number = 0; // Variável para rastrear a soma da distância\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit(): void {\n    const map = L.map('map').setView([-18.924067, -48.282142], 12);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n\n    this.http.get('./assets/positions.json').subscribe((data: any) => {\n      const positionsData = data;\n\n      const positions = positionsData.data;\n      const markers: L.Layer[] | undefined = [];\n      const polygon = L.polyline([], { color: 'blue' }).addTo(map);\n\n      let prevPosition: any = null; // Variável para rastrear a posição anterior\n\n      positions.forEach((position: any) => {\n        const lat = parseFloat(position.latitude);\n        const lon = parseFloat(position.longitude);\n        const marker = L.marker([lat, lon]).addTo(map);\n        markers.push(marker);\n\n        if (prevPosition) {\n          const currentLatLng = L.latLng(lat, lon);\n          const prevLatLng = L.latLng(prevPosition.latitude, prevPosition.longitude);\n          const distance = currentLatLng.distanceTo(prevLatLng);\n\n          // Adicione a distância à variável de soma\n          this.totalDistance += distance;\n        }\n\n        polygon.addLatLng([lat, lon]);\n        prevPosition = position; // Atualize a posição anterior\n      });\n\n      map.fitBounds(L.featureGroup(markers).getBounds());\n\n      // Agora você pode exibir a soma da distância em algum lugar, por exemplo, no console\n      console.log('Soma da distância:', this.totalDistance);\n    });\n  }\n}\n","<div class=\"total-distance\">\r\n  Soma da distância: {{ totalDistance }} metros\r\n</div>\n<div style=\"width: 100%;\"></div>\n<!-- leaflet-map.component.html -->\n<div id=\"map\" style=\"height: 500px;\"></div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
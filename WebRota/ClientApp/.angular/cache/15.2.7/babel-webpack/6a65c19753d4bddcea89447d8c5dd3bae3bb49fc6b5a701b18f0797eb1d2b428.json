{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://localhost:7003/api/Users/login'; // URL do serviço de autenticação\n  }\n\n  login(email, password) {\n    // Construa os parâmetros da URL\n    const params = new HttpParams().set('email', email).set('password', password);\n    return this.http.get(this.baseUrl, {\n      params\n    }).subscribe(response => {\n      if (response.token) {\n        var token = response.token;\n        // Salve o token em localStorage ou em algum local seguro.\n        localStorage.setItem('token', token);\n      }\n    }, error => {\n      console.error('Erro na solicitação de login:', error);\n      // Lide com o erro, se necessário\n    });\n  }\n\n  getToken() {\n    // Recupere o token de localStorage ou de onde você o armazenou.\n    var token = localStorage.getItem('token');\n    return token;\n  }\n  logout() {\n    // Remova o token quando o usuário sair.\n    localStorage.removeItem('token');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAK7D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,wCAAwC,CAAC,CAAC;EAEpB;;EAExCC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC;IACA,MAAMC,MAAM,GAAG,IAAIP,UAAU,EAAE,CAC5BQ,GAAG,CAAC,OAAO,EAAEH,KAAK,CAAC,CACnBG,GAAG,CAAC,UAAU,EAAEF,QAAQ,CAAC;IAE5B,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAAM,IAAI,CAACC,OAAO,EAAE;MAAEH;IAAM,CAAE,CAAC,CAACI,SAAS,CAC3DC,QAAQ,IAAG;MACT,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAClB,IAAIA,KAAK,GAAGD,QAAQ,CAACC,KAAK;QAC1B;QACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;;IAExC,CAAC,EACDG,KAAK,IAAG;MACNC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC,CACF;EACH;;EAIAE,QAAQ;IACN;IACA,IAAIL,KAAK,GAAGC,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;IACzC,OAAON,KAAK;EACd;EAEAO,MAAM;IACJ;IACAN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;EAClC;;AAtCWpB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFV;AAAM","names":["HttpParams","AuthService","constructor","http","login","email","password","params","set","get","baseUrl","subscribe","response","token","localStorage","setItem","error","console","getToken","getItem","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\willi\\Documents\\GitHub\\platform-test\\WebRota\\ClientApp\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public token: string | undefined;\n  private baseUrl = 'https://localhost:7003/api/Users/login'; // URL do serviço de autenticação\n\n  constructor(private http: HttpClient) { }\n\n  login(email: string, password: string) {\n    // Construa os parâmetros da URL\n    const params = new HttpParams()\n      .set('email', email)\n      .set('password', password);\n\n    return this.http.get<any>(this.baseUrl, { params }).subscribe(\n      response => {\n        if (response.token) {\n          var token = response.token;\n          // Salve o token em localStorage ou em algum local seguro.\n          localStorage.setItem('token', token);\n        }\n      },\n      error => {\n        console.error('Erro na solicitação de login:', error);\n        // Lide com o erro, se necessário\n      }\n    );\n  }\n\n\n\n  getToken() {\n    // Recupere o token de localStorage ou de onde você o armazenou.\n    var token = localStorage.getItem('token');\n    return token;\n  }\n\n  logout() {\n    // Remova o token quando o usuário sair.\n    localStorage.removeItem('token');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
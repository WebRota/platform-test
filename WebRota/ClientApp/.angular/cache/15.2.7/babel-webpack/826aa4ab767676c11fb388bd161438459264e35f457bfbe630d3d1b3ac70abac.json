{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LeafletMapComponent {\n  constructor(http) {\n    this.http = http;\n    this.totalDistance = 0;\n    this.markers = []; // Usando o tipo Marker\n    this.polyline = null;\n    this.message = \"Clique no mapa para adicionar mais coordenadas\";\n    this.showMessage = false;\n    // Adicione esta variável à sua classe LeafletMapComponent\n    this.clickedPoint = null;\n  }\n  ngOnInit() {\n    this.map = L.map('map').setView([-18.924067, -48.282142], 12);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n    this.polyline = L.polyline([], {\n      color: 'blue'\n    }).addTo(this.map);\n    this.http.get('./assets/positions.json').subscribe(data => {\n      const positionsData = data;\n      const positions = positionsData.data;\n      positions.forEach(position => {\n        const lat = parseFloat(position.latitude);\n        const lon = parseFloat(position.longitude);\n        this.addMarker(lat, lon);\n      });\n      this.map.fitBounds(L.featureGroup(this.markers).getBounds());\n    });\n  }\n  addMarkerFromClick() {\n    this.showMessage = true;\n    // Solicite ao usuário que clique no mapa para adicionar um novo marcador\n    this.map.on('click', e => {\n      const marker = L.marker(e.latlng).addTo(this.map);\n      this.markers.push(marker);\n      if (this.markers.length > 1) {\n        const prevMarker = this.markers[this.markers.length - 2];\n        const currentMarker = this.markers[this.markers.length - 1];\n        const distance = prevMarker.getLatLng().distanceTo(currentMarker.getLatLng());\n        this.totalDistance += distance;\n        if (this.polyline) {\n          this.polyline.addLatLng(currentMarker.getLatLng());\n        }\n      }\n    });\n  }\n  addMarker(lat, lon) {\n    const marker = L.marker([lat, lon]).addTo(this.map);\n    this.markers.push(marker);\n    if (this.markers.length > 1) {\n      const prevMarker = this.markers[this.markers.length - 2];\n      const currentMarker = this.markers[this.markers.length - 1];\n      const distance = prevMarker.getLatLng().distanceTo(currentMarker.getLatLng());\n      this.totalDistance += distance;\n      if (this.polyline) {\n        this.polyline.addLatLng(currentMarker.getLatLng());\n      }\n    }\n  }\n}\nLeafletMapComponent.ɵfac = function LeafletMapComponent_Factory(t) {\n  return new (t || LeafletMapComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nLeafletMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LeafletMapComponent,\n  selectors: [[\"app-leaflet-map\"]],\n  decls: 12,\n  vars: 3,\n  consts: [[2, \"width\", \"100%\", \"display\", \"flex\", \"flex-direction\", \"column\", \"align-items\", \"center\", \"justify-content\", \"center\"], [2, \"color\", \"orange\", \"font-weight\", \"bold\"], [2, \"color\", \"orange\"], [1, \"btn-orange\", 3, \"click\"], [1, \"message\", 3, \"hidden\"], [\"id\", \"map\", 2, \"height\", \"500px\"]],\n  template: function LeafletMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"p\", 1);\n      i0.ɵɵtext(2, \"Soma da dist\\u00E2ncia: \");\n      i0.ɵɵelementStart(3, \"span\", 2);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(5, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function LeafletMapComponent_Template_button_click_5_listener() {\n        return ctx.addMarkerFromClick();\n      });\n      i0.ɵɵtext(6, \"Adicionar Cordenadas\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 4);\n      i0.ɵɵtext(8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"br\")(10, \"p\")(11, \"div\", 5);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\"\", ctx.totalDistance, \" metros\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"hidden\", !ctx.showMessage);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  styles: [\".button-and-message[_ngcontent-%COMP%] {\\r\\n  display: inline-block;\\r\\n  vertical-align: top; \\r\\n}\\r\\n\\r\\n.btn-orange[_ngcontent-%COMP%] {\\r\\n  background-color: orange;\\r\\n  color: white;\\r\\n  padding: 10px 20px;\\r\\n  border: none;\\r\\n  cursor: pointer;\\r\\n  border-radius: 5px;\\r\\n  font-weight: bold;\\r\\n  margin-right: 10px; \\r\\n}\\r\\n\\r\\n.message[_ngcontent-%COMP%] {\\r\\n  color: orange;\\r\\n  font-weight: bold;\\r\\n  display: inline-block; \\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbGVhZmxldC1tYXAvbGVhZmxldC1tYXAuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHFCQUFxQjtFQUNyQixtQkFBbUIsRUFBRSwrQ0FBK0M7QUFDdEU7O0FBRUE7RUFDRSx3QkFBd0I7RUFDeEIsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIsa0JBQWtCLEVBQUUsOEJBQThCO0FBQ3BEOztBQUVBO0VBQ0UsYUFBYTtFQUNiLGlCQUFpQjtFQUNqQixxQkFBcUIsRUFBRSxxQ0FBcUM7QUFDOUQiLCJzb3VyY2VzQ29udGVudCI6WyIuYnV0dG9uLWFuZC1tZXNzYWdlIHtcclxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgdmVydGljYWwtYWxpZ246IHRvcDsgLyogQWxpbmhhciBvcyBlbGVtZW50b3MgdmVydGljYWxtZW50ZSBhbyB0b3BvICovXHJcbn1cclxuXHJcbi5idG4tb3JhbmdlIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiBvcmFuZ2U7XHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIHBhZGRpbmc6IDEwcHggMjBweDtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7IC8qIEVzcGHDg8KnbyDDg8KgIGRpcmVpdGEgZG8gYm90w4PCo28gKi9cclxufVxyXG5cclxuLm1lc3NhZ2Uge1xyXG4gIGNvbG9yOiBvcmFuZ2U7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAvKiBQYXJhIHBvc2ljaW9uYXIgYW8gbGFkbyBkbyBib3TDg8KjbyAqL1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["L","LeafletMapComponent","constructor","http","ngOnInit","map","setView","tileLayer","attribution","addTo","polyline","color","get","subscribe","data","positionsData","positions","forEach","position","lat","parseFloat","latitude","lon","longitude","addMarker","fitBounds","featureGroup","markers","getBounds","addMarkerFromClick","showMessage","on","e","marker","latlng","push","length","prevMarker","currentMarker","distance","getLatLng","distanceTo","totalDistance","addLatLng","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\willi\\Documents\\GitHub\\platform-test\\WebRota\\ClientApp\\src\\app\\leaflet-map\\leaflet-map.component.ts","C:\\Users\\willi\\Documents\\GitHub\\platform-test\\WebRota\\ClientApp\\src\\app\\leaflet-map\\leaflet-map.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as L from 'leaflet';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-leaflet-map',\n  templateUrl: './leaflet-map.component.html',\n  styleUrls: ['./leaflet-map.component.css']\n})\nexport class LeafletMapComponent implements OnInit {\n  totalDistance: number = 0;\n  map!: L.Map;\n  markers: L.Marker[] = []; // Usando o tipo Marker\n  polyline: L.Polyline | null = null;\n  message: string = \"Clique no mapa para adicionar mais coordenadas\";\n  showMessage: boolean = false;\n\n  \n  constructor(private http: HttpClient) { }\n\n  ngOnInit(): void {\n    this.map = L.map('map').setView([-18.924067, -48.282142], 12);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n\n    this.polyline = L.polyline([], { color: 'blue' }).addTo(this.map);\n\n    this.http.get('./assets/positions.json').subscribe((data: any) => {\n      const positionsData = data;\n      const positions = positionsData.data;\n\n      positions.forEach((position: any) => {\n        const lat = parseFloat(position.latitude);\n        const lon = parseFloat(position.longitude);\n        this.addMarker(lat, lon);\n      });\n\n      this.map.fitBounds(L.featureGroup(this.markers).getBounds());\n    });\n  }\n\n \n  // Adicione esta variável à sua classe LeafletMapComponent\n  clickedPoint: L.LatLng | null = null;\n  addMarkerFromClick() {\n    this.showMessage = true;\n    // Solicite ao usuário que clique no mapa para adicionar um novo marcador\n    this.map.on('click', (e: L.LeafletMouseEvent) => {\n      const marker = L.marker(e.latlng).addTo(this.map);\n      this.markers.push(marker);\n      if (this.markers.length > 1) {\n        const prevMarker = this.markers[this.markers.length - 2];\n        const currentMarker = this.markers[this.markers.length - 1];\n\n        const distance = prevMarker.getLatLng().distanceTo(currentMarker.getLatLng());\n        this.totalDistance += distance;\n\n        if (this.polyline) {\n          this.polyline.addLatLng(currentMarker.getLatLng());\n        }\n      }\n    });\n  }\n  addMarker(lat: number, lon: number) {\n    const marker = L.marker([lat, lon]).addTo(this.map);\n    this.markers.push(marker);\n\n    if (this.markers.length > 1) {\n      const prevMarker = this.markers[this.markers.length - 2];\n      const currentMarker = this.markers[this.markers.length - 1];\n\n      const distance = prevMarker.getLatLng().distanceTo(currentMarker.getLatLng());\n      this.totalDistance += distance;\n\n      if (this.polyline) {\n        this.polyline.addLatLng(currentMarker.getLatLng());\n      }\n    }\n  }\n}\n","<div style=\"width: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center;\">\r\n  <p style=\"color: orange; font-weight: bold;\">Soma da distância: <span style=\"color: orange;\">{{ totalDistance }} metros</span></p>\r\n  <!-- leaflet-map.component.html -->\r\n\r\n</div>\r\n<button (click)=\"addMarkerFromClick()\" class=\"btn-orange\">Adicionar Cordenadas</button>\r\n\r\n<div class=\"message\" [hidden]=\"!showMessage\">{{ message }}</div>\r\n\r\n<br /><p></p>\r\n\r\n\r\n\r\n\r\n<div id=\"map\" style=\"height: 500px;\"></div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
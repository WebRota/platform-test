{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://localhost:7003/api/Users/login'; // URL do serviço de autenticação\n    this.isAuthenticated = false;\n  }\n  login(email, password) {\n    const params = new HttpParams();\n    var url = `${this.baseUrl}?email=${email}&password=${password}`;\n    this.isAuthenticated = true;\n    return this.http.post(url, params);\n  }\n  isAuthenticatedUser() {\n    return this.isAuthenticated;\n  }\n  getToken() {\n    // Recupere o token de localStorage ou de onde você o armazenou.\n    var token = localStorage.getItem('token');\n    return token;\n  }\n  logout() {\n    // Remova o token quando o usuário sair.\n    localStorage.removeItem('token');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAM7D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,wCAAwC,CAAC,CAAC;IACpD,oBAAe,GAAY,KAAK;EACA;EAExCC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,MAAM,GAAG,IAAIP,UAAU,EAAE;IAC/B,IAAIQ,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,UAAUJ,KAAK,aAAaC,QAAQ,EAAE;IAC/D,IAAI,CAACI,eAAe,GAAG,IAAI;IAC3B,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAMH,GAAG,EAACD,MAAM,CAAC;EACxC;EAEAK,mBAAmB;IACjB,OAAO,IAAI,CAACF,eAAe;EAC7B;EAEAG,QAAQ;IACN;IACA,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACzC,OAAOF,KAAK;EACd;EAEAG,MAAM;IACJ;IACAF,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;EAClC;;AA1BWjB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkB,SAAXlB,WAAW;EAAAmB,YAFV;AAAM","names":["HttpParams","AuthService","constructor","http","login","email","password","params","url","baseUrl","isAuthenticated","post","isAuthenticatedUser","getToken","token","localStorage","getItem","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\willi\\Documents\\GitHub\\platform-test\\WebRota\\ClientApp\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  public token: string | undefined;\r\n  private baseUrl = 'https://localhost:7003/api/Users/login'; // URL do serviço de autenticação\r\n  private isAuthenticated: boolean = false;\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    const params = new HttpParams();\r\n    var url = `${this.baseUrl}?email=${email}&password=${password}`;\r\n    this.isAuthenticated = true;\r\n    return this.http.post<any>(url,params);\r\n  }\r\n\r\n  isAuthenticatedUser() {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  getToken() {\r\n    // Recupere o token de localStorage ou de onde você o armazenou.\r\n    var token = localStorage.getItem('token');\r\n    return token;\r\n  }\r\n\r\n  logout() {\r\n    // Remova o token quando o usuário sair.\r\n    localStorage.removeItem('token');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}